
service: cicd-aws

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: dev
  environment:
    CUSTOMER_INFO: "customer-info"
    IS_OFFLINE: true
    AWS_REGION: "us-east-1"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMER_INFO}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack
  - serverless-export-env

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  webpackIncludeModules:
    packagePath: './package.json'
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

functions:
  hello:
    handler: handler/handler.hello
    events:
      - http:
          path: handler
          method: GET
  
  addCustomer:
    handler: customer/customerCRUD.addCustomer
    events:
      - http:
          path: addCustomer/{email}
          method: POST
  
  getCustomersList:
    handler: customer/customerCRUD.getCustomersList
    events:
      - http:
          path: getCustomersList
          method: GET
          
  getCustomer:
    handler: customer/customerCRUD.getCustomer
    events:
      - http:
          path: getCustomer/{email}
          method: GET
  
#Common functions:
  dynamodb: 
    handler: common/dynamodb.dynamoDB

resources:
  Resources:
    customerInfo:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Retain
        Properties:
          TableName: customer-info
          AttributeDefinitions:
            - AttributeName: email
              AttributeType: S
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1